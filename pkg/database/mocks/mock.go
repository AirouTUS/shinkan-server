// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/database/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	database "github.com/AirouTUS/shinkan-server/pkg/database"
	model "github.com/AirouTUS/shinkan-server/pkg/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBRepository is a mock of DBRepository interface
type MockDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepositoryMockRecorder
}

// MockDBRepositoryMockRecorder is the mock recorder for MockDBRepository
type MockDBRepositoryMockRecorder struct {
	mock *MockDBRepository
}

// NewMockDBRepository creates a new mock instance
func NewMockDBRepository(ctrl *gomock.Controller) *MockDBRepository {
	mock := &MockDBRepository{ctrl: ctrl}
	mock.recorder = &MockDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBRepository) EXPECT() *MockDBRepositoryMockRecorder {
	return m.recorder
}

// ListCategory mocks base method
func (m *MockDBRepository) ListCategory(input database.ListCategoryInput) ([]*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategory", input)
	ret0, _ := ret[0].([]*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategory indicates an expected call of ListCategory
func (mr *MockDBRepositoryMockRecorder) ListCategory(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategory", reflect.TypeOf((*MockDBRepository)(nil).ListCategory), input)
}

// GetCircle mocks base method
func (m *MockDBRepository) GetCircle(input database.GetCircleInput) (*model.GetCircle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircle", input)
	ret0, _ := ret[0].(*model.GetCircle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircle indicates an expected call of GetCircle
func (mr *MockDBRepositoryMockRecorder) GetCircle(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircle", reflect.TypeOf((*MockDBRepository)(nil).GetCircle), input)
}

// ListCircle mocks base method
func (m *MockDBRepository) ListCircle(input database.ListCircleInput) ([]*model.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCircle", input)
	ret0, _ := ret[0].([]*model.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCircle indicates an expected call of ListCircle
func (mr *MockDBRepositoryMockRecorder) ListCircle(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCircle", reflect.TypeOf((*MockDBRepository)(nil).ListCircle), input)
}

// PostCircle mocks base method
func (m *MockDBRepository) PostCircle(input database.PostCircleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCircle", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostCircle indicates an expected call of PostCircle
func (mr *MockDBRepositoryMockRecorder) PostCircle(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCircle", reflect.TypeOf((*MockDBRepository)(nil).PostCircle), input)
}
